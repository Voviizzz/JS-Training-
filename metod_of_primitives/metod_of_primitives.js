// let roma = {
//     name: 'Roma',
//     sayHi(){
//         alert('hi' +' '+ this.name)
//     }
// }
// roma.sayHi()

// let ourStr = 'привет'
// console.log(ourStr.toUpperCase())

// Очень просто, не правда ли? 
// Вот, что на самом деле происходит в str.toUpperCase():
// //Строка str – примитив. В момент обращения к его свойству, 
// создаётся специальный объект, который знает значение строки 
// и имеет такие полезные методы, как toUpperCase().
// //Этот метод запускается и возвращает новую строку (показывается в alert).  
//  Специальный объект удаляется, оставляя только примитив str.
//  



// let num = 1.2323323
//  alert(num.toFixed(2))
//  Число имеет собственный набор методов. 
//  Например, toFixed(n) округляет число до n знаков после запятой



//Особенные примитивы null и undefined являются исключениями.
//  У них нет соответствующих «объектов-обёрток», 
//  и они не имеют никаких методов. В некотором смысле, 
//  они «самые примитивные».

// Попытка доступа к свойствам такого значения возвратит ошибку:

// alert(null.test); // ошибка




// Все примитивы, кроме null и undefined, 
// предоставляют множество полезных методов. 
// ы познакомимся с ними поближе в следующих главах.
// // Формально эти методы работают с помощью временных объектов, 
// но движки JavaScript внутренне очень хорошо оптимизируют 
// этот процесс, так что их вызов не требует много ресурсов.
